from anymail.signals import pre_send
from django.db.models.signals import post_delete, post_save
from django.dispatch import receiver

from events.models import Enrolment
from events.notifications import NotificationType
from events.utils import send_event_notifications_to_guardians


@receiver(post_save, sender=Enrolment, dispatch_uid="send_enrolment_email")
def send_enrolment_email(instance, created, **kwargs):
    if created:
        send_event_notifications_to_guardians(
            instance.occurrence.event,
            NotificationType.OCCURRENCE_ENROLMENT,
            instance.child,
            occurrence=instance.occurrence,
        )


@receiver(post_delete, sender=Enrolment, dispatch_uid="send_unenrolment_email")
def send_unenrolment_email(instance, **kwargs):
    send_event_notifications_to_guardians(
        instance.occurrence.event,
        NotificationType.OCCURRENCE_UNENROLMENT,
        instance.child,
        occurrence=instance.occurrence,
    )


@receiver(pre_send)
def remove_message_id(sender, message, **kwargs):
    # We need to remove the already generated Message-ID and let it be generated by the
    # ESP in order to avoid the message being identified as spam by some strict
    # filters.
    message.extra_headers.pop("Message-ID", None)
